name: aws-terraform-deploy-production

on:
  pull_request:
    branches: [master]
    types: [closed]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_WORKSPACE: prod

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Package source code to deployment
        run: zip -r -j application.zip src/

      - name: Upload ZIP file
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: application.zip

  setup-infra:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      s3-bucket-url: ${{ steps.s3.outputs.s3-bucket-url }}
      s3-bucket-name: ${{ steps.s3.outputs.s3-bucket-name }}
      s3-bucket-object-name: ${{ steps.s3.outputs.s3-bucket-object-name }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform workspace
        id: workspace
        run: |
          echo "In workspace: $(terraform workspace show)"

      - name: Terraform init
        id: init
        run: terraform -chdir=infrastructure/ init

      - name: Terraform format
        id: fmt
        run: terraform -chdir=infrastructure/ fmt -recursive

      - name: Terraform validate
        id: validate
        run: terraform -chdir=infrastructure/ validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform -chdir=infrastructure/ plan

      - name: Terraform apply
        id: apply
        run: terraform -chdir=infrastructure/ apply -auto-approve

      - name: Export terraform output
        id: s3
        run: |
          echo "s3-bucket-name=$(terraform -chdir=infrastructure/ output -raw s3-bucket-name)" >> $GITHUB_OUTPUT
          echo "s3-bucket-object-name=$(terraform -chdir=infrastructure/ output -raw s3-bucket-object-name)" >> $GITHUB_OUTPUT
          echo "s3-bucket-url=$(terraform -chdir=infrastructure/ output -raw s3-bucket-url)" >> $GITHUB_OUTPUT

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: setup-infra
    env:
      S3_BUCKET_URL: ${{ needs.setup-infra.outputs.s3-bucket-url }}
      S3_BUCKET_NAME: ${{ needs.setup-infra.outputs.s3-bucket-name }}
      S3_BUCKET_OBJECT_NAME: ${{ needs.setup-infra.outputs.s3-bucket-object-name }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact

      - name: Upload package to S3 bucket
        run: aws s3 cp application.zip $S3_BUCKET_URL

      - name: Create ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name simple-webapp \
          --source-bundle S3Bucket="$S3_BUCKET_NAME",S3Key="${S3_BUCKET_OBJECT_NAME}application.zip" \
          --version-label "ver-${{ github.sha }}" 

      - name: Deploy ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk update-environment \
          --environment-name $TF_WORKSPACE-env \
          --version-label "ver-${{ github.sha }}"